

const express = require("express");
const cors = require("cors");
const multer = require("multer");
const fs = require("fs");
const { GoogleGenAI } = require("@google/genai");
const { createClient } = require("@supabase/supabase-js");
const pdfParse = require("pdf-parse");
require("dotenv").config();

const app = express();
app.use(express.json());
app.use(cors());

const supabaseUrl = "https://hqqljqflmtgbstsbpuoq.supabase.co";
const supabaseKey = process.env.SUPABASE_KEY;
const supabase = createClient(supabaseUrl, supabaseKey);

// Storage setup for multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    return cb(null, "./public/images"); // Set the destination to save the file
  },
  filename: function (req, file, cb) {
    return cb(null, `${Date.now()}_${file.originalname}`); // Set the file name to current timestamp + original name
  },
});

const upload = multer({ storage });

// Endpoint to upload PDF
app.post("/upload", upload.single("file"), (req, res) => {
  console.log(req.body);
  console.log(req.file);

  if (req.file) {
    const filePath = req.file.path;

    // Read and parse the PDF
    fs.readFile(filePath, (err, data) => {
      if (err) {
        console.error("Error reading file:", err);
        return res.status(500).send("Error reading file");
      }

      pdfParse(data)
        .then(function (pdfData) {
          console.log("Extracted Text:", pdfData.text);
          const extractedText = pdfData.text;

          if (extractedText.trim() === "") {
            return res.status(400).send("No text extracted from the PDF");
          }

          // Call main with the extracted text
          main(extractedText);

          // Send the extracted text to the client
          res.send(extractedText);
        })
        .catch((error) => {
          console.error("Error parsing PDF:", error);
          return res.status(500).send("Error parsing PDF");
        });
    });
  } else {
    res.status(400).send("No file uploaded");
  }
});

// Function to generate embeddings
async function main(extractedText) {
  try {
    // Ensure the API key is set properly from environment variables
    const apiKey = process.env.GEMINI_API_KEY;

    // Check if the text is valid
    if (!extractedText || extractedText.trim() === "") {
      console.error("No valid text to process.");
      return;
    }

    // Initialize the Google API client
    const ai = new GoogleGenAI({ apiKey });

    // Request embeddings
    const response = await ai.models.embedContent({
      model: "gemini-embedding-exp-03-07",
      contents: [extractedText], // The content should be an array
    });

    console.log("Embedding Response:", response.embeddings);

    // Now you can store embeddings in Supabase or use them for further processing
    // Example: Store them in your Supabase database (if needed)

    const embedding = response.embeddings;
    await storeEmbedding("your_file_name", embedding);

  } catch (error) {
    console.error("Error generating embeddings:", error);
  }
}

// Function to store embeddings in Supabase (example)
async function storeEmbedding(fileName, embedding) {
  try {
    const { data, error } = await supabase
      .from("embeddings")
      .insert([
        { file_name: fileName, embedding: JSON.stringify(embedding) },
      ]);

    if (error) {
      console.error("Error storing embedding in Supabase:", error);
      throw error;
    }

    console.log("Embedding stored in Supabase:", data);
  } catch (error) {
    console.error("Error with Supabase storage:", error);
  }
}

// Start server
app.listen(8000, () => {
  console.log("Server is running on port 8000");
});
























app.post("/ask", async (req, res) => {
  try {
    const { question } = req.body;
    console.log("Question received:", question);
    
    if (!question) {
      return res.status(400).send("Question is required.");
    }

    
    try {
    const prompt = `what IS JAVA`;
    const result = await model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();
      
      console.log("Response text from LLM:", text);
      res.json({ answer: text });

    // return response;
  } catch (error) {
    console.error("Error generating content from LLM:", error);
    return { error: "Error generating response." };
  }
  
  }catch (error) {
    console.error("Error in /ask endpoint:", error);
    return res.status(500).send("Internal server error");
  }
})